#include <Sampler.hpp>
#include <TestUtilities.hpp>

#include <chrono>

void test() noexcept
{
    Sampler s({19, 14, 11, 9, 7, 4, 3, 1});
    s.add_sample(20);
    Sampler s1 = std::vector<long>({20, 3, 19, 4, 9, 1, 14, 7, 11});
    Sampler s2 = std::vector<long>({1, 14, 11, 7, 9, 4, 3});
    // Sampler s3 = std::vector<long>({386, 412, 352, 88, 289, 506, 194, 190, 613, 224, 896, 428, 133, 933, 258, 832, 209, 945, 687, 903, 486, 60, 598, 76, 882, 309, 269, 656, 46, 741, 242, 405, 599, 545, 750, 301, 954, 211, 21, 124, 425, 591, 554, 910, 508, 453, 625, 628, 563, 65, 245, 609, 596, 325, 616, 355, 176, 44, 668, 634, 928, 432, 290, 665, 767, 894, 737, 640, 229, 54, 906, 348, 793, 922, 520, 330, 923, 573, 932, 972, 112, 565, 915, 38, 740, 512, 673, 427, 340, 912, 624, 704, 699, 900, 802, 127, 724, 844, 262, 924, 559, 895, 289, 285, 537, 501, 987, 909, 788, 931, 180, 393, 799, 69, 584, 544, 458, 641, 939, 29, 599, 37, 527, 125, 77, 482, 626, 868, 641, 532, 854, 668, 558, 429, 379, 858, 686, 573, 739, 53, 39, 867, 695, 309, 926, 398, 388, 225, 672, 271, 608, 214, 357, 361, 171, 176, 199, 162, 603, 130, 964, 267, 386, 493, 882, 254, 404, 45, 838, 714, 485, 767, 142, 618, 985, 183, 316, 904, 891, 484, 864, 836, 387, 592, 808, 555, 379, 13, 544, 316, 295, 922, 172, 863, 354, 159, 548, 256, 882, 513, 372, 323, 214, 40, 332, 459, 666, 645, 794, 770, 287, 970, 461, 778, 150, 238, 296, 839, 687, 384, 630, 642, 778, 797, 263, 613, 479, 74, 5, 304, 680, 915, 195, 327, 252, 297, 402, 277, 720, 189, 120, 471, 744, 54, 488, 924, 246, 888, 233, 427, 856, 457, 280, 687, 85, 886, 599, 572, 84, 512, 347, 505, 471, 812, 4, 894, 938, 191, 177, 281, 575, 774, 454, 871, 3, 867, 803, 976, 333, 526, 834, 399, 669, 454, 399, 389, 470, 765, 813, 565, 301, 509, 157, 611, 486, 270, 187, 389, 77, 905, 279, 647, 185, 872, 72, 169, 898, 31, 841, 830, 721, 946, 697, 905, 237, 406, 318, 753, 345, 386, 448, 88, 687, 482, 263, 829, 435, 919, 432, 107, 247, 182, 817, 490, 252, 167, 673, 446, 741, 411, 564, 132, 874, 237, 509, 195, 541, 282, 465, 742, 539, 504, 548, 597, 526, 698, 989, 934, 316, 982, 430, 30, 900, 271, 747, 812, 459, 895, 245, 922, 872, 655, 24, 256, 774, 539, 816, 54, 800, 148, 506, 277, 504, 205, 802, 157, 263, 532, 649, 757, 444, 563, 262, 181, 310, 176, 358, 147, 3, 99, 733, 424, 179, 913, 904, 208, 5, 847, 918, 165, 188, 276, 216, 902, 642, 381, 773, 440, 750, 151, 779, 668, 691, 185, 851, 193, 356, 626, 882, 703, 398, 834, 950, 752, 3, 434, 932, 32, 819, 965, 555, 726, 604, 370, 830, 33, 748, 78, 897, 32, 391, 836, 92, 703, 845, 806, 504, 883, 409, 955, 227, 795, 607, 178, 1000, 300, 181, 808, 340, 802, 342, 427, 795, 518, 845, 71, 997, 822, 127, 898, 273, 213, 325, 517, 95, 126, 148, 400, 632, 774, 854, 914, 376, 645, 82, 189, 630, 702, 463, 317, 590, 495, 649, 420, 279, 311, 164, 97, 156, 73, 835, 274, 911, 328, 72, 668, 498, 693, 9, 842, 217, 804, 46, 210, 724, 33, 404, 974, 224, 841, 859, 66, 246, 617, 240, 478, 537, 920, 894, 321, 304, 175, 907, 264, 887, 69, 898, 109, 314, 810, 780, 419, 981, 74, 423, 216, 136, 564, 140, 900, 988, 267, 169, 952, 306, 114, 237, 419, 186, 928, 110, 907, 739, 189, 168, 504, 364, 419, 798, 364, 850, 901, 641, 848, 146, 867, 661, 415, 597, 651, 460, 662, 802, 778, 7, 971, 238, 426, 519, 95, 337, 824, 975, 881, 61, 230, 887, 991, 688, 816, 496, 435, 401, 688, 110, 998, 899, 381, 887, 31, 60, 294, 105, 719, 696, 298, 437, 313, 447, 841, 27, 810, 893, 245, 452, 915, 265, 819, 147, 23, 977, 209, 817, 550, 485, 762, 919, 592, 15, 910, 945, 531, 754, 728, 68, 405, 812, 760, 196, 803, 145, 785, 366, 389, 688, 589, 489, 732, 788, 996, 245, 475, 605, 488, 224, 949, 130, 250, 572, 600, 28, 781});

    Sampler s5({26, 333, 615, 596, 248, 787, 727, 674, 54, 362, 907, 776, 646, 977, 436, 396, 972, 733, 901, 504, 430, 893, 82, 880, 429, 854, 653, 919, 764, 726, 200, 724, 973, 904, 940, 948, 321, 164, 37, 779, 902, 375, 681, 651, 247, 972, 796, 877, 224, 923, 220, 509, 382, 59, 736, 598, 248, 930, 67, 982, 704, 885, 483, 278, 857, 835, 445, 253, 248, 786, 316, 725, 3, 111, 581, 568, 862, 310, 629, 311, 180, 590, 566, 899, 116, 76, 130, 769, 102, 687, 23, 75, 865, 521, 28, 234, 513, 450, 326, 434, 116, 510, 116, 983, 697, 377, 284, 62, 616, 417, 576, 424, 370, 836, 949, 913, 607, 60, 702, 42, 647, 498, 574, 457, 42, 938, 597, 629, 557, 431, 500, 951, 412, 444, 631, 69, 360, 747, 524, 666, 151, 337, 425, 123, 871, 903, 907, 384, 583, 708, 225, 148, 515, 508, 559, 883, 526, 594, 832, 658, 80, 460, 595, 981, 732, 599, 690, 727, 870, 976, 912, 571, 230, 635, 157, 831, 459, 302, 738, 52, 273, 994, 723, 257, 342, 226, 143, 425, 169, 833, 119, 459, 41, 78, 919, 78, 357, 844, 146, 91, 511, 822, 519, 348, 217, 906, 499, 849, 535, 461, 312, 122, 878, 926, 509, 75, 260, 512, 691, 958, 855, 993, 282, 845, 269, 686, 837, 87, 420, 17, 255, 973, 437, 639, 142, 226, 654, 746, 324, 254, 956, 982, 250, 910, 439, 656, 289, 327, 552, 577, 424, 143, 122, 362, 988, 945, 553, 621, 60, 463, 535, 414, 884, 533, 276, 132, 396, 673, 233, 841, 734, 165, 489, 117, 219, 452, 682, 164, 93, 372, 419, 146, 178, 229, 625, 60, 263, 169, 792, 669, 794, 314, 555, 900, 587, 644, 977, 704, 227, 465, 789, 37, 447, 106, 806, 618, 277, 135, 683, 298, 841, 508, 158, 878, 840, 142, 407, 982, 908, 492, 739, 248, 523, 83, 27, 897, 55, 250, 808, 624, 805, 671, 492, 534, 455, 158, 521, 893, 725, 316, 57, 682, 695, 554, 4, 454, 168, 635, 529, 47, 4, 771, 184, 470, 392, 496, 455, 899, 679, 475, 968, 539, 767, 279, 504, 239, 20, 910, 402, 277, 633, 220, 766, 867, 356, 79, 774, 423, 304, 669, 173, 326, 583, 265, 563, 274, 225, 897, 595, 454, 674, 530, 151, 919, 893, 746, 972, 903, 211, 212, 176, 583, 226, 835, 953, 175, 972, 861, 212, 286, 482, 802, 500, 289, 300, 19, 42, 460, 982, 275, 307, 458, 681, 439, 675, 509, 254, 720, 91, 503, 520, 446, 394, 366, 211, 620, 945, 547, 627, 550, 91, 244, 700, 158, 534, 836, 42, 494, 310, 935, 768, 60, 21, 85, 346, 725, 48, 897, 608, 67, 679, 668, 266, 123, 125, 282, 0, 991, 290, 267, 629, 610, 110, 881, 643, 372, 523, 293, 760, 946, 846, 862, 85, 910, 704, 941, 201, 774, 669, 617, 398, 315, 456, 235, 340, 993, 74, 51, 58, 960, 559, 715, 844, 105, 639, 809, 448, 430, 934, 722, 399, 948, 0, 390, 277, 504, 733, 889, 856, 967, 406, 203, 790, 82, 479, 930, 105, 832, 236, 60, 407, 121, 798, 756, 858, 444, 223, 72, 511, 732, 861, 120, 686, 450, 226, 986, 869, 433, 774, 774, 593, 117, 853, 492, 610, 532, 748, 603, 536, 225, 106, 167, 20, 627, 743, 565, 605, 954, 366, 940, 433, 570, 786, 371, 909, 41, 596, 919, 349, 608, 126, 300, 503, 587, 381, 372, 22, 248, 50, 194, 943, 295, 365, 627, 342, 104, 795, 321, 723, 324, 264, 95, 207, 822, 586, 986, 132, 47, 269, 507, 735, 635, 904, 667, 942, 981, 343, 522, 208, 232, 36, 476, 788, 343, 634, 17, 262, 668, 504, 228, 517, 504, 157, 118, 996, 27, 801, 608, 154, 799, 643, 696, 114, 230, 787, 367, 113, 662, 601, 749, 661, 841, 209, 857, 170, 125, 400, 724, 672, 135, 931, 861, 58, 250, 393, 301, 654, 681, 594, 516, 222, 111, 335, 576, 812, 54, 13, 906, 673, 855, 662, 475, 617, 866, 743, 15, 960, 208, 782, 707, 140, 835, 139, 2, 793, 758, 114, 815, 540, 599, 600, 128, 464, 696, 416, 645, 85, 919, 763, 909, 165, 307, 46, 541, 875, 66, 350, 942, 957, 986, 868, 849, 828, 124, 847, 46, 599, 952, 250, 595, 687, 59, 829, 569, 721, 376, 864, 290, 711, 336, 847, 618, 759, 809, 495, 394, 958, 547, 295, 305, 364, 908, 370, 327, 544, 925, 614, 134, 340, 307, 914, 1, 645, 276, 759, 497, 751, 984, 299, 317, 626, 128, 228, 710, 880, 700, 313, 841, 289, 686, 194, 155, 869, 633, 730, 545, 83, 567, 677, 612, 240, 207, 736, 24, 188, 821, 434, 94, 393, 176, 601, 280, 677, 828, 707, 701, 244, 869, 936, 500, 306, 786, 417, 37, 912, 679, 302, 560, 670, 704, 889, 989, 894, 741, 396, 607, 915, 321, 652, 382, 976, 446, 486, 645, 882, 990});

    assert_equal(s5.stats(), BasicStats{0, 996, 508.643540669856, 83738.069108994780, 255.000000000000, 516.000000000000, 751.000000000000, 836});

    Sampler s3({656, 916, 169, 881, 458, 883, 672, 438, 162, 155, 10, 249, 968, 708, 728, 191, 83, 9, 104,
                755, 452, 639, 650, 69, 305, 900, 668, 217, 758, 506, 611, 380, 990, 638, 83, 150, 318, 171,
                7, 870, 71, 842, 185, 126, 324, 217, 768, 195, 308, 728, 246, 347, 31, 591, 589, 378, 189,
                697, 322, 891, 60, 777, 610, 667, 345, 735, 360, 756, 487, 195, 272, 58, 935, 865, 579, 800,
                721, 17, 635, 751, 588, 850, 907, 57, 281, 663, 204, 175, 886, 898, 17, 839, 787, 592, 322,
                590, 334, 51, 63, 854, 989, 558, 987, 816, 138, 220, 579, 693, 14, 501, 421, 866, 561, 659,
                356, 582, 469, 464, 805, 863, 821, 242, 27, 271, 407, 515, 722, 517, 658, 893, 304, 723, 613,
                997, 147, 244, 386, 847, 130, 947, 761, 827, 287, 697, 675, 969, 977, 638, 913, 513, 184, 565,
                456, 766, 233, 179, 770, 508, 691, 953, 696, 250, 641, 785, 344, 945, 292, 595, 609, 442, 111,
                736, 18, 345, 498, 319, 427, 725, 446, 650, 181, 507, 794, 241, 965, 284, 432, 677, 778, 992,
                162, 755, 563, 684, 372, 662, 888, 550, 398, 418, 512, 445, 973, 879, 956, 814, 70, 619, 109,
                119, 760, 93, 874, 791, 353, 37, 95, 880, 998, 336, 576, 758, 552, 687, 536, 857, 20, 93, 993,
                719, 179, 83, 4, 537, 511, 481, 556, 661, 655, 502, 483, 141, 656, 146, 666, 933, 716, 422,
                143, 870, 317, 789, 105, 253, 560, 395, 678, 609, 713, 437, 751, 142, 30, 357, 564, 308, 771,
                956, 20, 229, 441, 859, 962, 252, 164, 350, 450, 135, 84, 384, 492, 202, 584, 298, 940, 592,
                599, 667, 292, 740, 376, 579, 5, 296, 350, 222, 117, 128, 756, 611, 94, 124, 899, 532, 615,
                505, 797, 338, 74, 857, 623, 259, 785, 594, 297, 543, 460, 783, 598, 928, 325, 133, 839, 488,
                338, 471, 303, 899, 742, 392, 594, 467, 698, 453, 828, 907, 418, 435, 405, 251, 866, 672, 200,
                33, 532, 316, 548, 979, 788, 135, 34, 338, 541, 313, 768, 185, 995, 928, 101, 392, 98, 604,
                318, 95, 823, 843, 658, 668, 767, 557, 215, 847, 886, 984, 115, 293, 357, 496, 514, 879, 382,
                87, 174, 155, 564, 424, 219, 536, 585, 865, 851, 810, 646, 22, 117, 454, 83, 735, 468, 266,
                657, 175, 539, 315, 377, 666, 875, 427, 614, 99, 80, 282, 386, 305, 114, 182, 151, 57, 404,
                360, 866, 357, 99, 320, 266, 608, 638, 598, 478, 699, 904, 901, 495, 562, 185, 99, 270, 906,
                731, 535, 257, 496, 221, 59, 15, 534, 346, 255, 617, 877, 31, 854, 589, 580, 560, 281, 204,
                611, 526, 653, 113, 749, 522, 441, 766, 825, 612, 67, 818, 293, 868, 800, 414, 11, 189, 749,
                799, 586, 847, 780, 306, 296, 804, 312, 364, 376, 121, 98, 846, 691, 48, 176, 488, 529, 828,
                665, 735, 244, 699, 703, 676, 938, 658, 219, 772, 898, 445, 908, 303, 23, 705, 877, 999, 967,
                183, 400, 693, 335, 273, 830, 804, 230, 538, 436, 929, 165, 957, 194, 816, 984, 642, 459, 758,
                60, 254, 702, 45, 508, 768, 16, 513, 339, 292, 333, 40, 852, 722, 797, 285, 504, 642, 810, 547,
                854, 958, 407, 638, 930, 290, 872, 654, 468, 226, 376, 357, 143, 150, 14, 938, 695, 317, 803,
                584, 394, 346, 642});

    // Prueba de tamaño
    assert_equal(s.size(), 9UL);

    // Prueba de obtención de lista por rango de posiciones
    assert_equal(s.get_by_position_range(2, 5), {4, 7, 9});
    assert_equal(s.get_by_position_range(3, 3), {7});

    // Prueba de obtención de lista ordenada
    assert_equal(s.list(), {1, 3, 4, 7, 9, 11, 14, 19, 20});

    /* Pruebas de media y varianza. Valores de prueba calculados con las
       funciones AVERAGE(...) y VAR.P(...) de Libre Office Calc.
    */
    assert_equal(s.mean(), 9.777777778);
    assert_equal(s.variance(), 41.50617284);

    // Prueba de obtención del i-ésimo elemento. Caso 4.
    assert_equal(s.get_sample(4), 9L);

    // Prueba de obtención de estadísticas
    assert_equal(s.stats(), BasicStats{1, 20, 9.777777778, 41.50617284, 4., 9., 14., 9});
    // assert_equal(s3.stats(), BasicStats{2, 100, 9.777777778, 41.50617284, 4., 9., 14., 9});

    /* Prueba de obtención de las posiciones de un conjunto de claves
       Las claves 2 y 5 no están en la muestra, por esa razón, en la respuesta
       tienen posición -1.
    */
    assert_equal(s.get_by_keys({11, 2, 5, 4}),
                 {std::make_tuple(2, -1),
                  std::make_tuple(4, 2),
                  std::make_tuple(5, -1),
                  std::make_tuple(11, 5)});
    // assert_equal(s3.get_by_keys({448, 904, 891, 399, 44, 730, 921, 912, 91, 394, 734, 41, 657, 469, 291, 200, 511, 713, 679, 150, 965, 88, 152, 613, 727, 711, 562, 22, 358, 933, 877, 964, 500, 302, 438, 526, 392, 840, 863, 765, 90, 63, 162, 530, 631, 55, 153, 715, 176, 508, 869, 629, 43, 975, 193, 945, 27, 362, 702, 620, 376, 714, 667, 53, 206, 57, 180, 755, 645, 101, 114, 617, 689, 915, 318, 196, 174, 194, 134, 525, 255, 579, 738, 641, 849, 931, 953, 789, 395, 268, 336, 384, 561, 299, 695, 134, 994, 40, 234, 875, 652, 20, 50, 866, 815, 971, 836, 464, 461}),
    //              {std::make_tuple(2, -1),
    //               std::make_tuple(4, 2),
    //               std::make_tuple(5, -1),
    //               std::make_tuple(11, 5)});

    // Prueba de obtención de una lista ordenada por rango de claves
    assert_equal(s.get_by_key_range(3, 11), {4, 7, 9, 11});
    assert_equal(s.get_by_key_range(5, 15), {7, 9, 11, 14});
    // assert_equal(s1.get_by_key_range(0, 100), {20, 3, 19, 4, 9, 1, 14, 7, 11});
    assert_equal(s1.get_by_key_range(1, 20), {3, 4, 7, 9, 11, 14, 19, 20});
    assert_equal(s1.get_by_key_range(1, 1), {});
    // assert_equal(s1.get_by_key_range(6, 20), {7, 9, 11});

    // Prueba de dejar en sampler, las claves entre dos rangos
    assert_equal(s1.cut_by_key_range(4, 11).list(), {7, 9, 11});
    assert_equal(s1.cut_by_key_range(6, 20).list(), {7, 9, 11});
    assert_equal(s1.cut_by_key_range(7, 11).list(), {9, 11});

    // Prueba de dejar en sampler, las claves entre dos rangos de posiciones
    assert_equal(s2.cut_by_position_range(2, 5).list(), {4, 7, 9});
}

void test_exceptions() noexcept
{
    Sampler s{};

    auto compute_mean = [&s]()
    { return s.mean(); };
    assert_throw_exception<std::length_error>(compute_mean);

    auto compute_variance = [&s]()
    { return s.variance(); };
    assert_throw_exception<std::length_error>(compute_variance);

    auto get_sample = [&s](size_t i)
    { return s.get_sample(i); };
    assert_throw_exception<std::out_of_range>(get_sample, 10);

    auto compute_stats = [&s]()
    { return s.stats(); };
    assert_throw_exception<std::length_error>(compute_stats);

    auto get_by_position_range = [&s](size_t l, size_t r)
    { return s.get_by_position_range(l, r); };
    assert_throw_exception<std::invalid_argument>(get_by_position_range, 5, 3);
    assert_throw_exception<std::out_of_range>(get_by_position_range, 1, 3);

    auto get_by_key_range = [&s](long l, long r)
    { return s.get_by_key_range(l, r); };
    assert_throw_exception<std::invalid_argument>(get_by_key_range, 5, 3);

    auto cut_by_key_range = [&s](long l, long r)
    { return s.cut_by_key_range(l, r); };
    assert_throw_exception<std::invalid_argument>(cut_by_key_range, 5, 3);

    auto cut_by_position_range = [&s](size_t l, size_t r)
    { return s.cut_by_position_range(l, r); };
    assert_throw_exception<std::invalid_argument>(cut_by_position_range, 5, 3);
    assert_throw_exception<std::out_of_range>(cut_by_position_range, 1, 3);
}

void measure_time() noexcept
{
    // Programa aquí tus medidas de tiempo. Te dejo un ejemplo.

    std::cout << "Constructor time: ";

    auto tp1 = std::chrono::high_resolution_clock::now();
    Sampler{std::vector<long>({20, 3, 19, 4, 9, 1, 14, 7, 11})};
    auto tp2 = std::chrono::high_resolution_clock::now();

    auto t = std::chrono::duration_cast<std::chrono::milliseconds>(tp2 - tp1).count();

    std::cout << t << " ms\n";
}

int main()
{
    std::cout << std::setprecision(6) << std::fixed << std::boolalpha;
    test();
    test_exceptions();
    measure_time();
    std::cout << "Everything ok!\n";
    return EXIT_SUCCESS;
}
