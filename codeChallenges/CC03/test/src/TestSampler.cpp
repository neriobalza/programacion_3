#include <Sampler.hpp>
#include <TestUtilities.hpp>

#include <chrono>

void test() noexcept
{
    Sampler s({19, 14, 11, 9, 7, 4, 3, 1});
    s.add_sample(20);
    Sampler s1 = std::vector<long>({20, 3, 19, 4, 9, 1, 14, 7, 11});
    Sampler s2 = std::vector<long>({1, 14, 11, 7, 9, 4, 3});

    Sampler s4 = std::vector<long>({130, 106, 407, 241, 454, 67, 398, 87, 958, 670, 301, 688, 406, 134, 958, 351, 53, 308, 712, 98, 701, 378, 919, 332, 270, 901, 915,
                                    184, 455, 964, 81, 712, 73, 998, 761, 445, 5, 131, 230, 113, 921, 980, 318, 522, 512, 712, 707, 350, 756, 526, 851, 905, 287, 917, 987, 970,
                                    659, 745, 194, 923, 839, 684, 340, 604, 833, 220, 711, 963, 545, 106, 455, 973, 513, 539, 349, 963, 373, 925, 4, 470, 567, 57, 819, 91, 603,
                                    562, 78, 721, 182, 256, 638, 661, 707, 721, 778, 15, 388, 976, 653, 930, 881, 497, 423, 768, 132, 752, 726, 534, 68, 706, 976, 166, 825, 201,
                                    413, 989, 172, 959, 751, 299, 505, 370, 869, 730, 117, 6, 633, 60, 680, 264, 121, 50, 203, 934, 240, 552, 866, 928, 99, 610, 23, 565, 475, 330,
                                    173, 198, 257, 61, 468, 98, 158, 996, 199, 23, 5, 151, 171, 131, 412, 982, 526, 377, 348, 282, 980, 681, 46, 590, 360, 910, 332, 665, 511, 599,
                                    764, 540, 118, 361, 95, 237, 185, 716, 68, 992, 840, 441, 352, 536, 528, 819, 446, 738, 384, 995, 931, 298, 627, 523, 502, 545, 329, 624,
                                    222, 304, 907, 787, 542, 796, 131, 221, 614, 546, 397, 811, 625, 9, 435, 18, 919, 649, 570, 944, 370, 104, 494, 954, 81, 214, 812, 601, 935,
                                    139, 341, 302, 815, 31, 868, 401, 862, 240, 459, 121, 475, 803, 141, 429, 203, 431, 686, 724, 389, 411, 999, 705, 945, 764, 816, 966, 54,
                                    590, 956, 430, 370, 711, 341, 825, 611, 22, 984, 231, 137, 535, 299, 830, 555, 338, 115, 945, 394, 495, 398, 413, 293, 548, 489, 414, 782,
                                    385, 164, 879, 687, 931, 238, 808, 455, 987, 457, 661, 252, 470, 805, 557, 192, 211, 660, 184, 874, 448, 621, 140, 943, 128, 515, 777, 308,
                                    456, 349, 956, 104, 465, 158, 707, 405, 533, 786, 803, 236, 309, 601, 792, 632, 925, 904, 646, 391, 39, 240, 702, 994, 421, 907, 449, 895,
                                    945, 70, 168, 646, 174, 991, 774, 502, 141, 145, 627, 540, 415, 546, 842, 146, 823, 138, 58, 909, 674, 369, 343, 252, 411, 747, 431, 628,
                                    359, 270, 888, 410, 963, 407, 216, 118, 670, 520, 824, 783, 23, 355, 653, 133, 50, 464, 909, 298, 845, 79, 743, 101, 373, 348, 694, 496, 110,
                                    68, 605, 605, 81, 624, 543, 459, 972, 907, 684, 566, 516, 419, 908, 761, 811, 231, 979, 581, 69, 213, 700, 527, 226, 492, 888, 852, 32, 659,
                                    277, 14, 646, 351, 735, 684, 994, 444, 498, 604, 804, 163, 123, 435, 923, 139, 416, 595, 180, 755, 19, 275, 32, 496, 617, 250, 921, 540, 327,
                                    549, 261, 976, 430, 73, 540, 154, 449, 605, 626, 891, 43, 397, 343, 128, 983, 500, 960, 504, 912, 306, 705, 908, 445, 732, 540, 803, 425,
                                    850, 292, 233, 476, 593, 808, 934, 814, 470, 501, 609, 871, 57, 728, 988, 684, 54, 444, 550, 615, 541, 669, 976, 39, 754, 175, 423, 95, 801,
                                    345, 516, 916, 585, 998, 947, 689, 598, 667, 522, 949, 240, 31, 37, 195, 247, 152, 465, 903, 954, 898, 871, 575, 753, 730, 404, 879, 449,
                                    517, 427, 905, 699, 694, 987, 139, 623, 646, 226, 93, 704, 29, 286, 53, 156, 455, 290, 692, 40, 446, 786, 980, 574, 497, 109, 279, 139, 52,
                                    521, 87, 755, 940, 898, 607, 314, 386, 649, 926, 207, 550, 258, 550, 245, 601, 268, 412, 353, 997, 743, 601, 619, 729, 204, 358, 994, 576,
                                    437, 446, 446, 857, 423, 593, 240, 202, 220, 678, 263, 316, 413, 821, 162, 78, 244, 974, 316, 693, 468, 626, 813, 33, 670, 7, 955, 41, 80, 740,
                                    734, 166, 410, 510, 220, 716, 500, 687, 947, 200, 336, 590, 127, 70, 849, 95, 659, 73, 923, 575, 270, 139, 286, 954, 842, 366, 483, 716, 28,
                                    109, 400, 840, 485, 373, 293, 550, 225, 463, 688, 156, 371, 573, 703, 710, 671, 18, 448, 837, 871, 977, 783, 535, 605, 503, 519, 5, 214, 359,
                                    586, 547, 687, 400, 439, 888, 837, 285, 182, 514, 512, 723, 996, 537});
    Sampler s5 = std::vector<long>({831, 557, 579, 264, 769, 678, 190, 629, 376, 164, 34, 278, 537, 174, 775, 8, 744, 201, 434, 672, 108, 136, 551, 877, 936, 738, 126, 1000, 576, 393, 736, 383, 737, 848, 417, 954, 735, 896, 496, 329, 540, 291, 164, 703, 611, 83, 22, 999, 265, 364, 931, 990, 981, 267, 568, 267, 794, 595, 261, 212, 716, 26, 724, 529, 836, 608, 107, 312, 55, 516, 270, 814, 265, 404, 531, 280, 73, 18, 902, 693, 901, 594, 646, 724, 262, 207, 351, 969, 27, 772, 5, 448, 217, 634, 449, 356, 883, 532, 484, 846, 301, 854, 346, 527, 852, 325, 386, 760, 171, 386, 449, 357, 942, 339, 912, 557, 863, 530, 406, 576, 750, 161, 969, 896, 85, 559, 842, 736, 285, 983, 110, 760, 944, 170, 179, 542, 437, 288, 281, 524, 670, 665, 399, 943, 702, 227, 63, 950, 501, 376, 739, 606, 841, 964, 141, 188, 807, 307, 595, 956, 348, 944, 736, 32, 35, 830, 501, 164, 975, 908, 284, 462, 483, 86, 254, 449, 907, 230, 549, 781, 354, 909, 476, 210, 829, 620, 609, 376, 320, 673, 32, 751, 475, 547, 966, 482, 357, 35, 61, 595, 171, 340, 763, 246, 258, 556, 212, 626, 487, 476, 342, 206, 703, 360, 603, 862, 849, 184, 35, 704, 774, 415, 381, 168, 381, 62, 779, 449, 983, 461, 628, 885, 948, 442, 650, 419, 256, 801, 165, 623, 456, 718, 643, 259, 846, 272, 518, 723, 905, 972, 89, 152, 226, 831, 706, 919, 956, 700, 6, 317, 222, 223, 48, 198, 289, 906, 646, 707, 724, 846, 301, 302, 358, 145, 853, 929, 233, 834, 783, 595, 689, 262, 103, 647, 163, 89, 2, 111, 464, 248, 150, 686, 49, 60, 852, 758, 583, 344, 499, 871, 965, 415, 925, 548, 430, 4, 829, 964, 357, 50, 406, 322, 875, 982, 296, 22, 682, 537, 200, 872, 291, 891, 44, 319, 719, 550, 96, 534, 834, 672, 632, 591, 136, 234, 498, 801, 289, 223, 401, 461, 165, 540, 884, 486, 284, 171, 754, 763, 709, 5, 266, 311, 888, 564, 935, 817, 665, 540, 384, 248, 403, 457, 496, 394, 436, 671, 338, 513, 855, 854, 589, 474, 182, 901, 533, 622, 166, 177, 710, 334, 555, 819, 370, 75, 274, 151, 548, 198, 495, 333, 632, 149, 465, 448, 41, 487, 581, 264, 682, 793, 132, 632, 382, 775, 425, 453, 676, 984, 965, 701, 259, 173, 338, 703, 779, 722, 116, 562, 618, 96, 621, 81, 480, 771, 682, 659, 730, 710, 489, 950, 884, 380, 795, 860, 132, 874, 80, 313, 290, 984, 416, 807, 729, 458, 209, 76, 308, 887, 919, 296, 540, 246, 134, 46, 670, 187, 405, 350, 126, 65, 930, 726, 146, 678, 547, 464, 154, 313, 403, 165, 180, 290, 141, 388, 991, 69, 921, 298, 693, 850, 815, 426, 62, 670, 119, 309, 26, 457, 660, 772, 708, 19, 242, 292, 661, 505, 473, 291, 939, 340, 267, 331, 709, 850, 274, 391, 773, 107, 798, 280, 157, 326, 605, 742, 82, 381, 531, 943, 501, 387, 123, 472, 973, 707, 663, 363, 327, 330, 257, 650, 947, 1000, 205, 2, 346, 558, 435, 653, 947, 24, 184, 563, 214, 547, 751, 723, 973, 114, 673, 845, 499, 576, 544, 256, 521, 213, 833, 194, 512, 237, 125, 561, 231, 337, 773, 632, 59, 845, 699, 976, 820, 474, 999, 446, 706, 176, 588, 431, 946, 765, 106, 240, 514, 858, 393, 429, 965, 270, 818, 384, 918, 608, 68, 535, 638, 423, 704, 147, 280, 955, 336, 124, 537, 376, 470, 238, 31, 65, 118, 982, 940, 971, 464, 475, 868, 764, 832, 440, 125, 965, 110, 927, 244, 257, 976, 330, 689, 44, 464, 158, 887, 423, 337, 698, 809, 157, 23, 927, 760, 749, 431, 101, 683, 422, 868, 93, 825, 51, 442, 77, 824, 992, 911, 794, 741, 897, 523, 405, 402, 941, 462, 434, 418, 94, 107, 477, 274, 90, 19, 457, 758, 480, 604, 272, 365, 160, 260, 82, 669, 756, 821, 653, 730, 756, 750, 516, 268, 755, 193, 169, 840, 547, 281, 589, 688, 537, 968, 380, 495, 322});

    // Prueba de tamaño
    assert_equal(s.size(), 9UL);

    // Prueba de obtención de lista por rango de posiciones
    assert_equal(s.get_by_position_range(2, 5), {4, 7, 9});
    assert_equal(s.get_by_position_range(3, 3), {7});

    // Prueba de obtención de lista ordenada
    assert_equal(s.list(), {1, 3, 4, 7, 9, 11, 14, 19, 20});

    /* Pruebas de media y varianza. Valores de prueba calculados con las
       funciones AVERAGE(...) y VAR.P(...) de Libre Office Calc.
    */
    assert_equal(s.mean(), 9.777777778);
    assert_equal(s.variance(), 41.50617284);

    // Prueba de obtención del i-ésimo elemento. Caso 4.
    assert_equal(s.get_sample(4), 9L);

    // Prueba de obtención de estadísticas
    assert_equal(s.stats(), BasicStats{1, 20, 9.777777778, 41.50617284, 4., 9., 14., 9});
    assert_equal(s4.stats(), BasicStats{4, 999, 505.725071225071, 83739.438659182953, 256.000000000000, 504.500000000000, 735.000000000000, 702});
    // assert_equal(s4.stats(), BasicStats{0, 997, 504.756410256410, 85366.202568798748, 226.000000000000, 504.500000000000, 762.000000000000, 546});
    // assert_equal(s3.stats(), BasicStats{2, 100, 9.777777778, 41.50617284, 4., 9., 14., 9});

    /* Prueba de obtención de las posiciones de un conjunto de claves
       Las claves 2 y 5 no están en la muestra, por esa razón, en la respuesta
       tienen posición -1.
    */
    // assert_equal(s.get_by_keys({11, 2, 5, 4}),
    //              {std::make_tuple(2, -1),
    //               std::make_tuple(4, 2),
    //               std::make_tuple(5, -1),
    //               std::make_tuple(11, 5)});
    // assert_equal(s3.get_by_keys({448, 904, 891, 399, 44, 730, 921, 912, 91, 394, 734, 41, 657, 469, 291, 200, 511, 713, 679, 150, 965, 88, 152, 613, 727, 711, 562, 22, 358, 933, 877, 964, 500, 302, 438, 526, 392, 840, 863, 765, 90, 63, 162, 530, 631, 55, 153, 715, 176, 508, 869, 629, 43, 975, 193, 945, 27, 362, 702, 620, 376, 714, 667, 53, 206, 57, 180, 755, 645, 101, 114, 617, 689, 915, 318, 196, 174, 194, 134, 525, 255, 579, 738, 641, 849, 931, 953, 789, 395, 268, 336, 384, 561, 299, 695, 134, 994, 40, 234, 875, 652, 20, 50, 866, 815, 971, 836, 464, 461}),
    //              {std::make_tuple(2, -1),
    //               std::make_tuple(4, 2),
    //               std::make_tuple(5, -1),
    //               std::make_tuple(11, 5)});

    // Prueba de obtención de una lista ordenada por rango de claves
    assert_equal(s.get_by_key_range(3, 11), {4, 7, 9, 11});
    assert_equal(s.get_by_key_range(5, 15), {7, 9, 11, 14});
    // assert_equal(s1.get_by_key_range(0, 100), {20, 3, 19, 4, 9, 1, 14, 7, 11});
    assert_equal(s1.get_by_key_range(1, 20), {3, 4, 7, 9, 11, 14, 19, 20});
    assert_equal(s1.get_by_key_range(1, 1), {});
    // assert_equal(s1.get_by_key_range(6, 20), {7, 9, 11});

    // Prueba de dejar en sampler, las claves entre dos rangos
    assert_equal(s1.cut_by_key_range(4, 11).list(), {7, 9, 11});
    assert_equal(s1.cut_by_key_range(6, 20).list(), {7, 9, 11});
    assert_equal(s1.cut_by_key_range(7, 11).list(), {9, 11});
    assert_equal(s5.cut_by_key_range(212, 420).list(), {213, 214, 217, 222, 223, 223, 226, 227, 230, 231, 233, 234, 237, 238, 240, 242, 244, 246, 246, 248, 248, 254, 256, 256, 257, 257, 258, 259, 259, 260, 261, 262, 262, 264, 264, 265, 265, 266, 267, 267, 267, 268, 270, 270, 272, 272, 274, 274, 274, 278, 280, 280, 280, 281, 281, 284, 284, 285, 288, 289, 289, 290, 290, 291, 291, 291, 292, 296, 296, 298, 301, 301, 302, 307, 308, 309, 311, 312, 313, 313, 317, 319, 320, 322, 322, 325, 326, 327, 329, 330, 330, 331, 333, 334, 336, 337, 337, 338, 338, 339, 340, 340, 342, 344, 346, 346, 348, 350, 351, 354, 356, 357, 357, 357, 358, 360, 363, 364, 365, 370, 376, 376, 376, 376, 380, 380, 381, 381, 381, 382, 383, 384, 384, 386, 386, 387, 388, 391, 393, 393, 394, 399, 401, 402, 403, 403, 404, 405, 405, 406, 406, 415, 415, 416, 417, 418, 419});

    // Prueba de dejar en sampler, las claves entre dos rangos de posiciones
    assert_equal(s2.cut_by_position_range(2, 5).list(), {4, 7, 9});
}

void test_exceptions() noexcept
{
    Sampler s{};

    auto compute_mean = [&s]()
    { return s.mean(); };
    assert_throw_exception<std::length_error>(compute_mean);

    auto compute_variance = [&s]()
    { return s.variance(); };
    assert_throw_exception<std::length_error>(compute_variance);

    auto get_sample = [&s](size_t i)
    { return s.get_sample(i); };
    assert_throw_exception<std::out_of_range>(get_sample, 10);

    auto compute_stats = [&s]()
    { return s.stats(); };
    assert_throw_exception<std::length_error>(compute_stats);

    auto get_by_position_range = [&s](size_t l, size_t r)
    { return s.get_by_position_range(l, r); };
    assert_throw_exception<std::invalid_argument>(get_by_position_range, 5, 3);
    assert_throw_exception<std::out_of_range>(get_by_position_range, 1, 3);

    auto get_by_key_range = [&s](long l, long r)
    { return s.get_by_key_range(l, r); };
    assert_throw_exception<std::invalid_argument>(get_by_key_range, 5, 3);

    auto cut_by_key_range = [&s](long l, long r)
    { return s.cut_by_key_range(l, r); };
    assert_throw_exception<std::invalid_argument>(cut_by_key_range, 5, 3);

    auto cut_by_position_range = [&s](size_t l, size_t r)
    { return s.cut_by_position_range(l, r); };
    assert_throw_exception<std::invalid_argument>(cut_by_position_range, 5, 3);
    assert_throw_exception<std::out_of_range>(cut_by_position_range, 1, 3);
}

void measure_time() noexcept
{
    // Programa aquí tus medidas de tiempo. Te dejo un ejemplo.

    std::cout << "Constructor time: ";

    auto tp1 = std::chrono::high_resolution_clock::now();
    Sampler{std::vector<long>({20, 3, 19, 4, 9, 1, 14, 7, 11})};
    auto tp2 = std::chrono::high_resolution_clock::now();

    auto t = std::chrono::duration_cast<std::chrono::milliseconds>(tp2 - tp1).count();

    std::cout << t << " ms\n";
}

int main()
{
    std::cout << std::setprecision(6) << std::fixed << std::boolalpha;
    test();
    test_exceptions();
    measure_time();
    std::cout << "Everything ok!\n";
    return EXIT_SUCCESS;
}
